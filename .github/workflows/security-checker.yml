name: Github Actions Security Compliance Checker
on:
  push:
    branches: [main, master]
    paths: ['.github/workflows/**']
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository to check'
        required: false
        default: ''
      workflow_file:
        description: 'Workflow file to check'
        required: false
        default: ''
      branch:
        description: 'Branch to check'
        required: false
        default: 'master'

jobs:
  security-compliance-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          aws --version
      
      - name: Run Security Compliance Check
        env:
          AGENT_ID: ${{ secrets.BEDROCK_AGENT_ID }}
          AGENT_ALIAS_ID: ${{ secrets.BEDROCK_AGENT_ALIAS_ID }}
          TARGET_REPOSITORY: ${{ github.event.inputs.repository || github.repository }}
          TARGET_WORKFLOW: ${{ github.event.inputs.workflow_file }}
          TARGET_BRANCH: ${{ github.event.inputs.branch || github.ref_name }}
        run: |
          echo "=== Github Actions Security Compliance Check ==="
          echo "Repository: $TARGET_REPOSITORY"
          echo "Workflow File: $TARGET_WORKFLOW"
          echo "Branch: $TARGET_BRANCH"
          echo "Agent ID: $AGENT_ID"
          
          SESSION_ID="compliance-check-$(date +%s)-$$"
          echo "Session ID: $SESSION_ID"
          
          REQUEST_TEXT="Run security compliance check on:
          - repository: $TARGET_REPOSITORY
          - workflow_file: $TARGET_WORKFLOW
          - branch: $TARGET_BRANCH"
          
          echo "=== Sending Compliance Check Request ==="
          echo "$REQUEST_TEXT"
          echo ""
          
          aws bedrock-agent-runtime invoke-agent \
            --agent-id "$AGENT_ID" \
            --agent-alias-id "$AGENT_ALIAS_ID" \
            --session-id "$SESSION_ID" \
            --input-text "$REQUEST_TEXT" \
            --output-file compliance-response.json \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60
          
          echo "=== Security Compliance Results ==="
          if [ -f compliance-response.json ]; then
            cat compliance-response.json | while IFS= read -r line; do
              echo "$line" | jq -r 'select(.completion != null) | .completion | select(.chunk != null) | .chunk | select(.bytes != null) | .bytes' | base64 -d 2>/dev/null || true
            done > compliance-results.txt
            
            if grep -q "SECURITY STATUS.*PASS" compliance-results.txt; then
              echo "COMPLIANCE CHECK: PASSED"
              echo "COMPLIANCE_STATUS=PASS" >> $GITHUB_ENV
            elif grep -q "SECURITY STATUS.*FAIL" compliance-results.txt; then
              echo "COMPLIANCE CHECK: FAILED"
              echo "COMPLIANCE_STATUS=FAIL" >> $GITHUB_ENV
            else
              echo "COMPLIANCE CHECK: INDETERMINATE"
              echo "COMPLIANCE_STATUS=INDETERMINATE" >> $GITHUB_ENV
            fi
          else
            echo "No response received"
            echo "COMPLIANCE_STATUS=ERROR" >> $GITHUB_ENV
            exit 1
          fi
      
      - name: Check All Repository Workflows
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.workflow_file == ''
        run: |
          echo "=== Checking All Repository Workflows ==="
          
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null || echo "")
          
          if [ -z "$WORKFLOW_FILES" ]; then
            echo "No workflow files found in .github/workflows/"
            exit 0
          fi
          
          OVERALL_STATUS="PASS"
          
          for workflow_file in $WORKFLOW_FILES; do
            workflow_name=$(basename "$workflow_file")
            echo "Checking: $workflow_name"
            
            SESSION_ID="bulk-check-${workflow_name}-$(date +%s)-$$"
            
            REQUEST_TEXT="Run security compliance check on:
            - repository: ${{ github.repository }}
            - workflow_file: $workflow_name
            - branch: ${{ github.ref_name }}"
            
            echo "Request: $REQUEST_TEXT"
            
            aws bedrock-agent-runtime invoke-agent \
              --agent-id "${{ secrets.BEDROCK_AGENT_ID }}" \
              --agent-alias-id "${{ secrets.BEDROCK_AGENT_ALIAS_ID }}" \
              --session-id "$SESSION_ID" \
              --input-text "$REQUEST_TEXT" \
              --output-file "compliance-${workflow_name}.json"
            
            if [ -f "compliance-${workflow_name}.json" ]; then
              cat "compliance-${workflow_name}.json" | while IFS= read -r line; do
                echo "$line" | jq -r 'select(.completion != null) | .completion | select(.chunk != null) | .chunk | select(.bytes != null) | .bytes' | base64 -d 2>/dev/null || true
              done > "results-${workflow_name}.txt"
              
              echo "=== Results for $workflow_name ==="
              cat "results-${workflow_name}.txt"
              
              if grep -q "SECURITY STATUS.*FAIL" "results-${workflow_name}.txt"; then
                OVERALL_STATUS="FAIL"
                echo "$workflow_name: FAILED"
              elif grep -q "SECURITY STATUS.*PASS" "results-${workflow_name}.txt"; then
                echo "$workflow_name: PASSED"
              else
                echo "$workflow_name: UNKNOWN STATUS"
              fi
            else
              echo "No response for $workflow_name"
              OVERALL_STATUS="FAIL"
            fi
            
            echo "----------------------------------------"
          done
          
          echo "OVERALL_COMPLIANCE_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
      
      - name: Generate Compliance Report
        if: always()
        run: |
          echo "# GitHub Actions Security Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "**Repository:** ${{ github.repository }}" >> compliance-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> compliance-report.md
          echo "**Check Date:** $(date -u)" >> compliance-report.md
          echo "**Compliance Checker:** AWS Bedrock Agent ${{ secrets.BEDROCK_AGENT_ID }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          if [ "${{ env.OVERALL_COMPLIANCE_STATUS }}" = "PASS" ] || [ "${{ env.COMPLIANCE_STATUS }}" = "PASS" ]; then
            echo "## OVERALL STATUS: COMPLIANCE PASSED" >> compliance-report.md
          elif [ "${{ env.OVERALL_COMPLIANCE_STATUS }}" = "FAIL" ] || [ "${{ env.COMPLIANCE_STATUS }}" = "FAIL" ]; then
            echo "## OVERALL STATUS: COMPLIANCE FAILED" >> compliance-report.md
          else
            echo "## OVERALL STATUS: COMPLIANCE CHECK INCOMPLETE" >> compliance-report.md
          fi
          
          echo "" >> compliance-report.md
          echo "## Security Requirements Checked:" >> compliance-report.md
          echo "1. All third-party actions pinned to commit SHA" >> compliance-report.md
          echo "2. No script injection vulnerabilities" >> compliance-report.md
          echo "3. No dangerous triggers" >> compliance-report.md
          echo "4. Proper token permissions" >> compliance-report.md
          echo "5. No hardcoded secrets" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## Detailed Results:" >> compliance-report.md
          echo "" >> compliance-report.md
          
          for result_file in compliance-results.txt results-*.txt; do
            if [ -f "$result_file" ]; then
              workflow_name=$(echo "$result_file" | sed 's/results-//' | sed 's/compliance-results/Main Check/' | sed 's/.txt//')
              echo "### $workflow_name" >> compliance-report.md
              echo '```' >> compliance-report.md
              cat "$result_file" >> compliance-report.md
              echo '```' >> compliance-report.md
              echo "" >> compliance-report.md
            fi
          done
          
          echo "---" >> compliance-report.md
          echo "*Generated by GitHub Actions Security Compliance Checker*" >> compliance-report.md
      
      - name: Upload Compliance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-compliance-report-${{ github.run_number }}
          path: |
            *.json
            *.txt
            *.md
          retention-days: 30
      
      - name: Fail Build on Compliance Failure
        if: env.COMPLIANCE_STATUS == 'FAIL' || env.OVERALL_COMPLIANCE_STATUS == 'FAIL'
        run: |
          echo "SECURITY COMPLIANCE CHECK FAILED"
          echo "Please review and fix issues"
          exit 1
      
      - name: Comment on PR with Compliance Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            const status = process.env.COMPLIANCE_STATUS || process.env.OVERALL_COMPLIANCE_STATUS || 'UNKNOWN';
            const statusEmoji = status === 'PASS' ? '✅' : status === 'FAIL' ? '❌' : '⚠️';
            
            let comment = `## ${statusEmoji} Security Compliance Check Results\n\n`;
            comment += `**Status:** ${status}\n`;
            comment += `**Checked by:** AWS Bedrock Agent \`${{ secrets.BEDROCK_AGENT_ID }}\`\n`;
            comment += `**Date:** ${new Date().toISOString()}\n\n`;
            
            try {
              if (fs.existsSync('compliance-report.md')) {
                const report = fs.readFileSync('compliance-report.md', 'utf8');
                const reportLines = report.split('\n');
                let truncatedReport = reportLines.slice(0, 40).join('\n');
                
                if (reportLines.length > 40) {
                  truncatedReport += '\n\n*... (see full report in artifacts)*';
                }
                
                comment += truncatedReport;
              } else {
                comment += 'Compliance check completed but detailed report not available.';
              }
            } catch (error) {
              comment += `Error reading compliance results: ${error.message}`;
            }
            
            if (status === 'FAIL') {
              comment += '\n\n**ACTION REQUIRED:** This PR fails security compliance. Please address the issues above before merging.';
            }
            
            comment += `\n\n[View Full Compliance Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
