name: Security Check

on: 
    workflow_dispatch: 
        inputs: 
            repository: 
                description: 'Target repository'
                required: false
                type: string
            workflow_file: 
                description: 'Workflow file to check'
                required: true
                type: string
            branch: 
                description: 'Target branch'
                required: false
                type: string

jobs: 
    security-check: 
        runs-on: ubuntu-latest
        steps:
            - name: Configure AWS credentials 
              uses: aws-actions/configure-aws-credentials@v4
              with: 
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
                role-to-assume: arn:aws:iam::544111548838:role/qonto-team-security
                role-session-name: github-actions-security-check
            - name: Setup Python
              uses: actions/setup-python@v4
              with: 
                python-version: '3.13'
            - name: Install Python dependencies
              run: | 
                python -m pip install --upgrade pip 
                pip install boto3
            - name: Run Security Check 
              env: 
                AGENT_ID: ${{ secrets.BEDROCK_AGENT_ID}}
                AGENT_ALIAS_ID: ${{ secrets.BEDROCK_AGENT_ALIAS_ID }}
                #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                #AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
                TARGET_REPOSITORY: ${{ github.event.inputs.repository || github.repository }}
                TARGET_WORKFLOW: ${{ github.event.inputs.workflow_file }}
                TARGET_BRANCH: ${{ github.event.inputs.branch || github.ref_name }}
              run: |
                #aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                #aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                #aws configure set default.region $AWS_DEFAULT_REGION

                echo "=== Github Actions Security Compliance Check ==="
                echo "Repository: $TARGET_REPOSITORY"
                echo "Workflow File: $TARGET_WORKFLOW"
                echo "Branch: $TARGET_BRANCH"
                echo "Agent ID: $AGENT_ID"

                #export AWS_PROFILE="security-staging"

                # Verify values 
                if [ -z "$AGENT_ID" ]; then
                    echo "AGENT_ID is not set"
                    exit 1
                fi

                if [ -z "$AGENT_ALIAS_ID" ]; then
                    echo "AGENT_ALIAS_ID is not set"
                    exit 1
                fi

                echo "=== AWS Credentials Check ==="
                aws sts get-caller-identity

                echo "=== Invoking Bedrock Agent ==="

                python << EOF 
                import boto3
                import json
                import os
                import sys
                import uuid 

                def invoke_agent(): 
                    try: 
                        client = boto3.client('bedrock-agent-runtime')

                        input_text = f"Run security compliance check on: repository: $TARGET_REPOSITORY workflow_file: $TARGET_WORKFLOW branch: $TARGET_BRANCH"

                        print("Request:", input_text)
                        print("=" * 50)

                        session_id = str(uuid.uuid4())
                        print(f"Session ID: {session_id}")

                        response = client.invoke_agent(
                            agentId='$AGENT_ID', 
                            agentAliasId='$AGENT_ALIAS_ID', 
                            sessionId=session_id, 
                            inputText=input_text, 
                            enableTrace=True
                        )

                        full_response = ""
                        for event in response['completion']: 
                            if 'chunk' in event and 'bytes' in event['chunk']: 
                                text = event['chunk']['bytes'].decode('utf-8')
                                print(text, end='', flush=True)
                                full_response += text
                            elif 'trace' in event: 
                                pass

                        with open('compliance-results.txt', 'w') as f: 
                            f.write(full_response)

                        print("\n" + "=" * 50)

                        if 'SECURITY_STATUS' in full_response.upper(): 
                            if 'PASS' in full_response.upper(): 
                                sys.exit(0)
                            elif 'FAIL' in full_response.upper(): 
                                sys.exit(1)

                        sys.exit(2)

                    except Exception as e: 
                        print(f"Error: {e}")
                        sys.exit(3)

                invoke_agent()
                EOF

                PYTHON_EXIT_CODE=$?

                echo "=== Results Analysis ==="

                if [ -f compliance-results.txt ]; then 
                    echo "=== Security Compliance Results ==="
                    cat compliance-results.txt

                    case $PYTHON_EXIT_CODE in 
                        0) 
                            echo "COMPLIANCE CHECK: PASSED"
                            echo "COMPLIANCE_STATUS=PASS" >> $GITHUB_ENV
                            ;;
                        1) 
                            echo "COMPLIANCE CHECK: FAILED"
                            echo "COMPLIANCE_STATUS=FAIL" >> $GITHUB_ENV
                            ;;
                        2) 
                            echo "COMPLIANCE CHECK: INDETERMINATE"
                            echo "COMPLIANCE_STATUS=UNKNOWN" >> $GITHUB_ENV
                            ;;
                        3) 
                            echo "COMPLIANCE CHECK: ERROR"
                            echo "COMPLIANCE_STATUS=ERROR" > $GITHUB_ENV
                            exit 1
                            ;;
                    esac
                else
                    echo "No results file generated"
                    echo "COMPLIANCE_STATUS=ERROR" >> $GITHUB_ENV
                    exit 1
                fi

